{
 "metadata": {
  "name": "Untitled0"
 },
 "nbformat": 3,
 "nbformat_minor": 0,
 "worksheets": [
  {
   "cells": [
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "#\u4ece\u7b2c9\u7ae0\u5f00\u59cb\u7528\u8fd9\u4e2a\u4e86\u3002\n",
      "\u751f\u6210\u5668\u65b9\u6cd5\uff0c\u5c31\u662f\u4e0e\u751f\u6210\u5668\u76f8\u5173\u7684\u65b9\u6cd5\uff0csend\uff0cthrow\u
ff0cclose,\u4e0b\u9762\u7684\u4f8b\u5b50\u662f\u8bf4\u53ef\u4ee5\u5728\u751f\u6210\u5668\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u5411\u5b83\u
53d1\u9001\u6d88\u606f\uff0c\u5e76\u6267\u884c\u3002throw\u662f\u629b\u51fa\u5f02\u5e38\uff0cclose\u662f\u505c\u6b62\u751f\u6210\u56
68"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "def repeater(value):\n",
      "    while True:\n",
      "        new=(yield value)\n",
      "        if new is not None:value=new\n",
      "r=repeater(42)\n",
      "r.next()\n",
      "r.send(\"hello send\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 18,
       "text": [
        "'hello send'"
       ]
      }
     ],
     "prompt_number": 18
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "\u4e0b\u9762\u662f\u6d4b\u8bd5\u4e00\u4e0bmd\u7684\u6570\u5b66\u516c\u5f0f\uff0c\u597d\u770b"
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "$x^{y^z}=(1+{\\rm e}^x)^{-2xy^w}$ "
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "+9.9 \u5c0f\u7ed3\uff1a\u8bf4\u5b9e\u8bdd\uff0c\u6ca1\u6709\u770b\u660e\u767d\uff0c\u4e0b\u6b21\u518d\u6765\u770b\u3002\n"
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "#\u7b2c10\u7ae0\u8282 \u5145\u7535\u65f6\u523b\n",
      "    \u6ce8\u610fsys.path.append() #\u589e\u52a0\u641c\u7d22\u6a21\u5757\u7684\u8def\u5f84\n",
      "    \u6ce8\u610fimport\u53ea\u6709\u4e00\u6b21\u6709\u6548\uff0c\u591a\u6b21\u7528reload\uff0c\u4f46\u662f\u4e0d\u5efa\u8bae\
u4f7f\u7528\n",
      "    pprint\u80fd\u6253\u5370\u4e00\u4e2a\u5927\u5bf9\u8c61\n",
      "\u5728linux\u6216\u8005\u662funix\u4e2d\u53ef\u4ee5\u4f7f\u7528PYTHONPATH:\n",
      "export PYTHONPATH=$PYTHONPATH:~/python\n",
      "\u6216\u8005\u53ef\u4ee5\u5728site-package\u4e2d\u627e\u4e00\u4e2a.pth\u7684\u6587\u4ef6\uff0c\u5b83\u5728python\u521d\u59cb\
u5316\u65f6\u4f1a\u81ea\u52a8\u5bfc\u5165\n",
      "\u5305\u662f\u4e00\u7cfb\u7edf\u6587\u4ef6\u7684\u96c6\u5408\uff0c\u5176\u4e2d\u6709\u4e00\u4e2a\u7279\u6b8a\u7684\u6587\u4ef
6\uff0c__init__py\n",
      "\n",
      "10.2.1 \u6a21\u5757\u4e2d\u6709\u4ec0\u4e48\uff0cdir()\uff0c\u53ef\u4ee5\u7528\u4ee5\u4e0b\u7684\u547d\u4ee4\u6765\u6253\u537
0\u4e00\u4e2a\u6a21\u5757\u4e2d\u7684\u53ef\u4ee5\u4ece\u5916\u90e8\u8c03\u7528\u7684\u65b9\u6cd5\uff0c\u6ce8\u610fstartswith\n",
      "\n",
      "__all__\u53d8\u91cf\uff0c\u6bd4\u5982copy.__all__\uff0c\u4f46\u662f\u8fd9\u91cc\u65e0\u6cd5\u6d4b\u8bd5\n",
      "\n",
      "\u7528help()\u83b7\u5f97\u5e2e\u52a9\uff0c\n",
      "\u7528__doc__\u6765\u83b7\u5f97\u6587\u6863\u3002"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "import sys\n",
      "[n for n in dir(sys.path) if not n.startswith('__')]\n",
      "\n",
      "help(sys)\n",
      "\n",
      "print range.__doc__\n",
      "\n"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Help on built-in module sys:\n",
        "\n",
        "NAME\n",
        "    sys\n",
        "\n",
        "FILE\n",
        "    (built-in)\n",
        "\n",
        "MODULE DOCS\n",
        "    http://docs.python.org/library/sys\n",
        "\n",
        "DESCRIPTION\n",
        "    This module provides access to some objects used or maintained by the\n",
        "    interpreter and to functions that interact strongly with the interpreter.\n",
        "    \n",
        "    Dynamic objects:\n",
        "    \n",
        "    argv -- command line arguments; argv[0] is the script pathname if known\n",
        "    path -- module search path; path[0] is the script directory, else ''\n",
        "    modules -- dictionary of loaded modules\n",
        "    \n",
        "    displayhook -- called to show results in an interactive session\n",
        "    excepthook -- called to handle any uncaught exception other than SystemExit\n",
        "      To customize printing in an interactive session or to install a custom\n",
        "      top-level exception handler, assign other functions to replace these.\n",
        "    \n",
        "    exitfunc -- if sys.exitfunc exists, this routine is called when Python exits\n",
        "      Assigning to sys.exitfunc is deprecated; use the atexit module instead.\n",
        "    \n",
        "    stdin -- standard input file object; used by raw_input() and input()\n",
        "    stdout -- standard output file object; used by the print statement\n",
        "    stderr -- standard error object; used for error messages\n",
        "      By assigning other file objects (or objects that behave like files)\n",
        "      to these, it is possible to redirect all of the interpreter's I/O.\n",
        "    \n",
        "    last_type -- type of last uncaught exception\n",
        "    last_value -- value of last uncaught exception\n",
        "    last_traceback -- traceback of last uncaught exception\n",
        "      These three are only available in an interactive session after a\n",
        "      traceback has been printed.\n",
        "    \n",
        "    exc_type -- type of exception currently being handled\n",
        "    exc_value -- value of exception currently being handled\n",
        "    exc_traceback -- traceback of exception currently being handled\n",
        "      The function exc_info() should be used instead of these three,\n",
        "      because it is thread-safe.\n",
        "    \n",
        "    Static objects:\n",
        "    \n",
        "    maxint -- the largest supported integer (the smallest is -maxint-1)\n",
        "    maxsize -- the largest supported length of containers.\n",
        "    maxunicode -- the largest supported character\n",
        "    builtin_module_names -- tuple of module names built into this interpreter\n",
        "    version -- the version of this interpreter as a string\n",
        "    version_info -- version information as a tuple\n",
        "    hexversion -- version information encoded as a single integer\n",
        "    copyright -- copyright notice pertaining to this interpreter\n",
        "    platform -- platform identifier\n",
        "    executable -- pathname of this Python interpreter\n",
        "    prefix -- prefix used to find the Python library\n",
        "    exec_prefix -- prefix used to find the machine-specific Python library\n",
        "    __stdin__ -- the original stdin; don't touch!\n",
        "    __stdout__ -- the original stdout; don't touch!\n",
        "    __stderr__ -- the original stderr; don't touch!\n",
        "    __displayhook__ -- the original displayhook; don't touch!\n",
        "    __excepthook__ -- the original excepthook; don't touch!\n",
        "    \n",
        "    Functions:\n",
        "    \n",
        "    displayhook() -- print an object to the screen, and save it in __builtin__._\n",
        "    excepthook() -- print an exception and its traceback to sys.stderr\n",
        "    exc_info() -- return thread-safe information about the current exception\n",
        "    exc_clear() -- clear the exception state for the current thread\n",
        "    exit() -- exit the interpreter by raising SystemExit\n",
        "    getdlopenflags() -- returns flags to be used for dlopen() calls\n",
        "    getprofile() -- get the global profiling function\n",
        "    getrefcount() -- return the reference count for an object (plus one :-)\n",
        "    getrecursionlimit() -- return the max recursion depth for the interpreter\n",
        "    getsizeof() -- return the size of an object in bytes\n",
        "    gettrace() -- get the global debug tracing function\n",
        "    setcheckinterval() -- control how often the interpreter checks for events\n",
        "    setdlopenflags() -- set the flags to be used for dlopen() calls\n",
        "    setprofile() -- set the global profiling function\n",
        "    setrecursionlimit() -- set the max recursion depth for the interpreter\n",
        "    settrace() -- set the global debug tracing function\n",
        "\n",
        "FUNCTIONS\n",
        "    __displayhook__ = displayhook(...)\n",
        "        displayhook(object) -> None\n",
        "        \n",
        "        Print an object to sys.stdout and also save it in __builtin__.\n",
        "    \n",
        "    __excepthook__ = excepthook(...)\n",
        "        excepthook(exctype, value, traceback) -> None\n",
        "        \n",
        "        Handle an exception by displaying it with a traceback on sys.stderr.\n",
        "    \n",
        "    call_tracing(...)\n",
        "        call_tracing(func, args) -> object\n",
        "        \n",
        "        Call func(*args), while tracing is enabled.  The tracing state is\n",
        "        saved, and restored afterwards.  This is intended to be called from\n",
        "        a debugger from a checkpoint, to recursively debug some other code.\n",
        "    \n",
        "    callstats(...)\n",
        "        callstats() -> tuple of integers\n",
        "        \n",
        "        Return a tuple of function call statistics, if CALL_PROFILE was defined\n",
        "        when Python was built.  Otherwise, return None.\n",
        "        \n",
        "        When enabled, this function returns detailed, implementation-specific\n",
        "        details about the number of function calls executed. The return value is\n",
        "        a 11-tuple where the entries in the tuple are counts of:\n",
        "        0. all function calls\n",
        "        1. calls to PyFunction_Type objects\n",
        "        2. PyFunction calls that do not create an argument tuple\n",
        "        3. PyFunction calls that do not create an argument tuple\n",
        "           and bypass PyEval_EvalCodeEx()\n",
        "        4. PyMethod calls\n",
        "        5. PyMethod calls on bound methods\n",
        "        6. PyType calls\n",
        "        7. PyCFunction calls\n",
        "        8. generator calls\n",
        "        9. All other calls\n",
        "        10. Number of stack pops performed by call_function()\n",
        "    \n",
        "    exc_clear(...)\n",
        "        exc_clear() -> None\n",
        "        \n",
        "        Clear global information on the current exception.  Subsequent calls to\n",
        "        exc_info() will return (None,None,None) until another exception is raised\n",
        "        in the current thread or the execution stack returns to a frame where\n",
        "        another exception is being handled.\n",
        "    \n",
        "    exc_info(...)\n",
        "        exc_info() -> (type, value, traceback)\n",
        "        \n",
        "        Return information about the most recent exception caught by an except\n",
        "        clause in the current stack frame or in an older stack frame.\n",
        "    \n",
        "    exit(...)\n",
        "        exit([status])\n",
        "        \n",
        "        Exit the interpreter by raising SystemExit(status).\n",
        "        If the status is omitted or None, it defaults to zero (i.e., success).\n",
        "        If the status is numeric, it will be used as the system exit status.\n",
        "        If it is another kind of object, it will be printed and the system\n",
        "        exit status will be one (i.e., failure).\n",
        "    \n",
        "    getcheckinterval(...)\n",
        "        getcheckinterval() -> current check interval; see setcheckinterval().\n",
        "    \n",
        "    getdefaultencoding(...)\n",
        "        getdefaultencoding() -> string\n",
        "        \n",
        "        Return the current default string encoding used by the Unicode \n",
        "        implementation.\n",
        "    \n",
        "    getdlopenflags(...)\n",
        "        getdlopenflags() -> int\n",
        "        \n",
        "        Return the current value of the flags that are used for dlopen()\n",
        "        calls. The flag constants are defined in the dl module.\n",
        "    \n",
        "    getfilesystemencoding(...)\n",
        "        getfilesystemencoding() -> string\n",
        "        \n",
        "        Return the encoding used to convert Unicode filenames in\n",
        "        operating system filenames.\n",
        "    \n",
        "    getprofile(...)\n",
        "        getprofile()\n",
        "        \n",
        "        Return the profiling function set with sys.setprofile.\n",
        "        See the profiler chapter in the library manual.\n",
        "    \n",
        "    getrecursionlimit(...)\n",
        "        getrecursionlimit()\n",
        "        \n",
        "        Return the current value of the recursion limit, the maximum depth\n",
        "        of the Python interpreter stack.  This limit prevents infinite\n",
        "        recursion from causing an overflow of the C stack and crashing Python.\n",
        "    \n",
        "    getrefcount(...)\n",
        "        getrefcount(object) -> integer\n",
        "        \n",
        "        Return the reference count of object.  The count returned is generally\n",
        "        one higher than you might expect, because it includes the (temporary)\n",
        "        reference as an argument to getrefcount().\n",
        "    \n",
        "    getsizeof(...)\n",
        "        getsizeof(object, default) -> int\n",
        "        \n",
        "        Return the size of object in bytes.\n",
        "    \n",
        "    gettrace(...)\n",
        "        gettrace()\n",
        "        \n",
        "        Return the global debug tracing function set with sys.settrace.\n",
        "        See the debugger chapter in the library manual.\n",
        "    \n",
        "    setcheckinterval(...)\n",
        "        setcheckinterval(n)\n",
        "        \n",
        "        Tell the Python interpreter to check for asynchronous events every\n",
        "        n instructions.  This also affects how often thread switches occur.\n",
        "    \n",
        "    setdlopenflags(...)\n",
        "        setdlopenflags(n) -> None\n",
        "        \n",
        "        Set the flags that will be used for dlopen() calls. Among other\n",
        "        things, this will enable a lazy resolving of symbols when importing\n",
        "        a module, if called as sys.setdlopenflags(0)\n",
        "        To share symbols across extension modules, call as\n",
        "        sys.setdlopenflags(dl.RTLD_NOW|dl.RTLD_GLOBAL)\n",
        "    \n",
        "    setprofile(...)\n",
        "        setprofile(function)\n",
        "        \n",
        "        Set the profiling function.  It will be called on each function call\n",
        "        and return.  See the profiler chapter in the library manual.\n",
        "    \n",
        "    setrecursionlimit(...)\n",
        "        setrecursionlimit(n)\n",
        "        \n",
        "        Set the maximum depth of the Python interpreter stack to n.  This\n",
        "        limit prevents infinite recursion from causing an overflow of the C\n",
        "        stack and crashing Python.  The highest possible limit is platform-\n",
        "        dependent.\n",
        "    \n",
        "    settrace(...)\n",
        "        settrace(function)\n",
        "        \n",
        "        Set the global debug tracing function.  It will be called on each\n",
        "        function call.  See the debugger chapter in the library manual.\n",
        "\n",
        "DATA\n",
        "    __stderr__ = <open file '<stderr>', mode 'w'>\n",
        "    __stdin__ = <open file '<stdin>', mode 'r'>\n",
        "    __stdout__ = <open file '<stdout>', mode 'w'>\n",
        "    api_version = 1013\n",
        "    argv = ['-c', '-f', '/root/.ipython/profile_nbserver/security/kernel-3...\n",
        "    builtin_module_names = ('__builtin__', '__main__', '_ast', '_codecs', ...\n",
        "    byteorder = 'little'\n",
        "    copyright = 'Copyright (c) 2001-2010 Python Software Foundati...ematis...\n",
        "    displayhook = <IPython.zmq.displayhook.ZMQShellDisplayHook object>\n",
        "    dont_write_bytecode = False\n",
        "    exc_value = TypeError('arg is a built-in module',)\n",
        "    exec_prefix = '/usr'\n",
        "    executable = '/usr/bin/python'\n",
        "    flags = sys.flags(debug=0, py3k_warning=0, division_warn...unicode=0, ...\n",
        "    float_info = sys.floatinfo(max=1.7976931348623157e+308, max_e...psilon...\n",
        "    hexversion = 33949424\n",
        "    last_value = AttributeError(\"'module' object has no attribute '__all__...\n",
        "    maxint = 9223372036854775807\n",
        "    maxsize = 9223372036854775807\n",
        "    maxunicode = 1114111\n",
        "    meta_path = []\n",
        "    modules = {'ConfigParser': <module 'ConfigParser' from '/usr/lib64/pyt...\n",
        "    path = ['', '/usr/lib/python2.6/site-packages/setuptools-19.6-py2.6.eg...\n",
        "    path_hooks = [<type 'zipimport.zipimporter'>]\n",
        "    path_importer_cache = {'': None, '/root/.ipython/extensions': <imp.Nul...\n",
        "    platform = 'linux2'\n",
        "    prefix = '/usr'\n",
        "    ps1 = 'In : '\n",
        "    ps2 = '...: '\n",
        "    ps3 = 'Out: '\n",
        "    py3kwarning = False\n",
        "    stderr = <IPython.zmq.iostream.OutStream object>\n",
        "    stdin = <open file '<stdin>', mode 'r'>\n",
        "    stdout = <IPython.zmq.iostream.OutStream object>\n",
        "    subversion = ('CPython', 'tags/r266', '84292')\n",
        "    version = '2.6.6 (r266:84292, Jan 22 2014, 09:42:36) \\n[GCC 4.4.7 2012...\n",
        "    version_info = (2, 6, 6, 'final', 0)\n",
        "    warnoptions = []\n",
        "\n",
        "\n",
        "range([start,] stop[, step]) -> list of integers\n",
        "\n",
        "Return a list containing an arithmetic progression of integers.\n",
        "range(i, j) returns [i, i+1, i+2, ..., j-1]; start (!) defaults to 0.\n",
        "When step is given, it specifies the increment (or decrement).\n",
        "For example, range(4) returns [0, 1, 2, 3].  The end point is omitted!\n",
        "These are exactly the valid indices for a list of 4 elements.\n"
       ]
      }
     ],
     "prompt_number": 31
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "10.3 \u6807\u51c6\u5e93 \uff0c\u8be6\u7ec6\u89c1\u4e66\u7684P175\u9875\n",
      "\n",
      "sys\uff1asys.argv,sys.path,sys.platform\n",
      "\n",
      "os: P177,os.environ,\u4f8b\u5b50os.environ['PYTHONPATH'],os.system(command)\u53ef\u4ee5\u6267\u884c\u547d\u4ee4\uff0c\u6709\u
70b9\u50cfperl\uff0c\u53e6\u5916\u8fd8\u6709\u4e00\u4e2a\u6a21\u5757\uff0cwebbrowser\u53ef\u4ee5\u6253\u5f00\u6d4f\u89c8\u5668\uff0c
\u4f46\u5728\u6b64\u6d4b\u8bd5\u4e0d\u884c\u3002\n",
      "\n",
      "fileinput:\u8fd9\u4e2a\u6709\u7528\u3002P179\uff0c\u53ef\u4ee5\u8ba9\u5904\u7406\u6587\u4ef6\u5f88\u7b80\u5355\u3002\n",
      "\n",
      "\u96c6\u5408\uff0c\u5806\uff0c\u53cc\u7aef\u961f\u5217\n",
      "\n",
      "set,\u8be6\u7ec6\u89c1P181\u5427\uff0c\u8fd9\u4e2a\u633a\u6709\u7528\u7684\u3002\u6ce8\u610f\u96c6\u5e02\u662f\u53ef\u53d8\u7
684\uff0c\u6240\u4ee5\u4e0d\u80fd\u7528\u6765\u505a\u952e\uff0c\u53ef\u4ee5\u7528frozenset\uff0c\n",
      "\n"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "import webbrowser\n",
      "webbrowser.open('http://133.96.72.168/nagios')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 34,
       "text": [
        "False"
       ]
      }
     ],
     "prompt_number": 34
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "\u5806\uff0c\u4e0d\u540c\u4e8e\u666e\u901a\u7684\u5217\u8868\uff0c\u5b83\u6709\u5806\u5c5e\u6027\uff1a\u4f4d\u4e8ei\u7684\u4f
4d\u7f6e\u4e0a\u7684\u5143\u7d20\u603b\u6bd4i//2\u7684\u5927\u3002\u6240\u4ee5\u5fc5\u987b\u4f7f\u7528heapify()\u6216\u8005\u4f7f\u7
528heappop\uff0c\u6216\u8005\u662fheappush\u6765\u5904\u7406\uff0cheapreplace\u5f39\u51fa\u6700\u5c0f\u7684\u5143\u7d20\uff0c\u52a0\
u5165\u65b0\u5143\u7d20\uff0c\u6bd4pop/push\u66f4\u6709\u6548\u7387\uff0c\u5b83\u7684nlargest(n,iter)\u548cnsmallest(n,iter)\u53ef\u
4ee5\u67e5\u627e\u4efb\u4f55\u53ef\u8fed\u4ee3\u5bf9\u8c61\u7684\u7b2cn\u5927\u548c\u7b2cn\u5c0f\u6570\u636e\uff0c\u5806\u6bd4sort\u
66f4\u9ad8\u6548\u3002\n",
      "\n"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "from heapq import *\n",
      "heap=[5,6,8,0,1,4,2]\n",
      "heapify(heap)\n",
      "heap\n",
      "heapreplace(heap,0.5)\n",
      "heap\n",
      "nlargest(2,heap)\n"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 39,
       "text": [
        "[8, 6]"
       ]
      }
     ],
     "prompt_number": 39
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "\u53cc\u7aef\u961f\u5217\uff0cdqueue\u5728collections\u5305\u542b\uff0c\u5b83\u53ef\u4ee5\u8981\u5f00\u5934\uff08\u5de6\u4fa7
\uff09\u589e\u52a0\u548c\u5f39\u51fa\u5143\u7d20\uff0c\u8fd8\u53ef\u4ee5\u65cb\u8f6c\uff0c\u5934\u5c3e\u76f8\u8fde"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "from collections import deque\n",
      "q=deque(range(5))\n",
      "q.append(5)\n",
      "q\n",
      "q.rotate(3)\n",
      "q\n"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 49,
       "text": [
        "deque([3, 4, 5, 0, 1, 2])"
       ]
      }
     ],
     "prompt_number": 49
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "\u7b80\u5355\u8bf4\uff0ctime\uff0c\u8fd9\u4e2a\u5728"
     ]
    }
   ],
   "metadata": {}
  }
 ]
}